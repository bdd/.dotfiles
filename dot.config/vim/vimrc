set encoding=utf-8
scriptencoding utf-8

" Terminal {{{
set ttyfast       " assume fast terminal and send more chars for smooth redraw
set lazyredraw    " don't redraw while executing macros, register and cmds
set mouse=a       " enable mouse in all modes (=a)
set ttymouse=sgr  " like xterm2 but supporting beyond 223 columns
" }}}

" Look & Feel {{{
syntax on
silent! colorscheme noclown

let &statusline = '[%n] %<%F %m%r%w%y %= (%l,%c) %P of %L'
set laststatus=2           " every window gets a statusline, always(=2)
set scrolloff=5            " scroll edge offset (to keep some context)
set shortmess=a            " abbreviate all(=a) messages when possible
set showcmd                " show last command

" command line completion similar to zsh default
" complete up to longest match and display the list of possible matches
set wildmode=list:longest

set list listchars=tab:»‧,trail:░,precedes:◄,extends:►,nbsp:‧
augroup listchars
  autocmd!
  " Hide trailing space markers in insert mode with a blank override.
  autocmd InsertEnter * if &list | setlocal listchars+=trail:\  | endif
  autocmd InsertLeave * if &list | setlocal listchars-=trail:\  | endif
augroup END
" }}}

" Behavior {{{
set hidden                      " don't unload but hide buffers when dismissed
set splitbelow splitright       " new window split to below, vsplit to right
set autochdir                   " change cwd to file's in selected buffer
set autoread                    " pickup file changes under unmodified buffer
set autowrite                   " write to before :next, :make, :suspend, ...
set autoindent                  " always-be-indenting
set copyindent                  " copy the existing indenting behavior of file
set expandtab                   " spaces over tabs for indentation
set shiftwidth=2                " without wasting too much screen estate
set softtabstop=-1              " equal to 'shiftwidth'
set ignorecase smartcase        " case insensitive search if all lowercase
set incsearch                   " incrementally move to match and highlight
set hlsearch                    " highlight previous search pattern
set history=1000                " command and search pattern history size
set visualbell                  " use visual bell instead of beeping
set backspace=indent,eol,start  " backspace over everything
"}}}

" Plugins {{{
"" Distributed with Vim
""" matchit: Extend '%' to matching groups like 'if', 'else', 'endif'.
packadd! matchit

""" ftplugin/man.vim: Render man pages in buffers with ':Man' command.
runtime ftplugin/man.vim
if exists(':Man')
  " Make 'K' in normal mode also use ':Man' instead of shelling out.
  set keywordprg=:Man
endif

silent! packadd minpac
if exists('g:loaded_minpac')
  command! -bar PackUpdate call minpac#update()
  command! -bar PackUpdateQuit call minpac#update('', {'do': 'qall'})
  command! -bar PackClean call minpac#clean()
  call minpac#init()
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  call minpac#add('LnL7/vim-nix')

  call minpac#add('fatih/vim-go')
  let g:go_fmt_command = "gopls"
  let g:go_info_mode = "gopls"
  let g:go_imports_mode = "gopls"
  let g:go_fillstruct_mode = "gopls"
  let g:go_gopls_matcher = "fuzzy"
  let g:go_gopls_complete_unimported = v:true
  let g:go_gopls_deep_completion = v:true
  let g:go_gopls_gofumpt = v:true
  let g:go_gopls_staticcheck = v:true

  let g:go_auto_type_info = v:true
  let g:go_updatetime = 300

  call minpac#add('godlygeek/tabular')
  call minpac#add('junegunn/fzf', {'do': {-> system('./install --bin')}})
  call minpac#add('junegunn/fzf.vim')
  command! -bang -nargs=* GRg
    \ call fzf#vim#grep(
    \   'rg --column --line-number --no-heading --color=always --smart-case -- '.fzf#shellescape(<q-args>),
    \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

  call minpac#add('junegunn/goyo.vim')

  call minpac#add('mileszs/ack.vim')
  if executable('rg') | let g:ackprg = 'rg --vimgrep --smart-case' | endif
  cnoreabbrev Ack Ack!

  call minpac#add('tpope/vim-commentary')
  call minpac#add('tpope/vim-eunuch')
  call minpac#add('tpope/vim-fugitive')
  call minpac#add('tpope/vim-rsi')
  call minpac#add('tpope/vim-surround')
  call minpac#add('tpope/vim-unimpaired')

  call minpac#add('dense-analysis/ale')
  let &statusline = substitute(&statusline,'%=',
        \ '%= %#WarningMsg#%{LinterStatus()}%*', '')
  function! LinterStatus() abort
    let l:status = ''
    if !exists('g:loaded_ale') | return  l:status | endif
    let l:c = ale#statusline#Count(bufnr(''))
    let l:e = l:c.error + l:c.style_error
    let l:w = l:c.warning + l:c.style_warning
    if l:e + l:w > 0
      let l:status = printf('<Lint: %d Err, %d Warn>', l:e, l:w)
    endif
    return l:status
  endfunction

  call minpac#add('prabirshrestha/vim-lsp')
  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
  endfunction

  augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END

  if executable('nil')
    autocmd User lsp_setup call lsp#register_server({
          \ 'name': 'nil',
          \ 'cmd': {server_info->['nil']},
          \ 'whitelist': ['nix'],
          \ })
  endif

  if executable('pylsp')
    " pip install python-lsp-server
    autocmd User lsp_setup call lsp#register_server({
          \ 'name': 'pylsp',
          \ 'cmd': {server_info->['pylsp']},
          \ 'allowlist': ['python'],
          \ })
  endif

  if executable('bash-language-server')
    autocmd User lsp_setup call lsp#register_server({
          \ 'name': 'bash-language-server',
          \ 'cmd': {server_info->['bash-language-server', 'start']},
          \ 'allowlist': ['sh', 'bash'],
          \ })
  endif

endif
" }}}

" Key Mappings {{{
let g:mapleader = "\<Space>"

" Use ';' instead of ':' for single finger key go into command mode from
" normal and visual modes.
nnoremap ; :
xnoremap ; :
" ...but don't lose the function of ';' to repeat f, F, t, T
nnoremap \ ;

" Use <CR> to select completion suggestion instead of <C-y>
inoremap <expr> <CR> pumvisible() ? '<C-y>' : '<CR>'

nnoremap <Leader><Leader> :execute PreferCmd('Buffers', 'buffers')<CR>
nnoremap <Leader>/ :execute ToggleOpt('hlsearch')<CR>
nmap <Leader>h <Plug>(noclown-echo-highlight-group-chain)
" }}}

" Commands
command! StripTrailingSpaces KeepWinView keeppatterns %s/\v\s+$//e
" Tmux supports BCE since 2.4 (released 2017/04/20). May still need this.
command! NoBCE set t_ut= <Bar> redraw!

" Detect file types. Load '&rtp/{ftplugin, indent}/<ft>.vim'.
filetype plugin indent on

" ~/.vim/.local: {{{
" All artifacts created by Vim at runtime go under one central location.
let vimlocal = fnamemodify($MYVIMRC, ':p:h') . '/.local'

let &viminfo = &viminfo . ',' . 'n'. vimlocal . '/viminfo'
let &directory = vimlocal . '/swp'
let &backupdir = vimlocal . '/bak'
let &undodir = vimlocal . '/undo'
let g:netrw_home = vimlocal
" }}}

" Local additions and overrides
let $LOCALVIMRC = vimlocal . '/vimrc'
if filereadable($LOCALVIMRC) | source $LOCALVIMRC | endif

" vim: undofile foldmethod=marker foldlevel=1
